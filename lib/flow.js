// Generated by CoffeeScript 1.6.3
var Event, Flow, Fluid, find, reject,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Event = require('the-event');

Fluid = require('./fluid');

find = function(arr, filter) {
  var item, _i, _len;
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    item = arr[_i];
    if (filter(item)) {
      return item;
    }
  }
};

reject = function(arr, filter) {
  var item, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    item = arr[_i];
    if (!filter(item)) {
      _results.push(item);
    }
  }
  return _results;
};

module.exports = Flow = (function(_super) {
  __extends(Flow, _super);

  Flow.prototype.router = null;

  Flow.prototype.deads = null;

  Flow.prototype.atives = null;

  Flow.prototype.pendings = null;

  function Flow(router) {
    this.router = router;
    this.deads = [];
    this.actives = [];
    this.pendings = [];
  }

  Flow.prototype.run = function(url, route) {
    var fluid,
      _this = this;
    this.emit('run:url', route);
    fluid = new Fluid(route, url);
    this.filter_pendings(fluid);
    this.filter_deads();
    this.emit('status:busy');
    if (this.router.mode === 'render+destroy') {
      this.run_pendings(url, function() {
        return _this.destroy_deads(function() {
          return _this.emit('status:free', _this.router.mode);
        });
      });
    }
    if (this.router.mode === 'destroy+render') {
      return this.destroy_deads(function() {
        return _this.run_pendings(url, function() {
          return _this.emit('status:free', _this.router.mode);
        });
      });
    }
  };

  Flow.prototype._find_dependency = function(parent) {
    var fluid, route;
    fluid = find(this.actives, function(f) {
      return f.url === parent.dependency;
    });
    if (fluid != null) {
      return fluid;
    }
    route = find(this.router.routes, function(r) {
      return r.matcher.test(parent.route.dependency);
    });
    if (route != null) {
      return new Fluid(route, parent.dependency);
    }
    return null;
  };

  Flow.prototype.filter_pendings = function(parent) {
    var err, fluid, route;
    this.pendings.unshift(parent);
    if (parent.dependency == null) {
      return;
    }
    if ((fluid = this._find_dependency(parent)) != null) {
      return this.filter_pendings(fluid);
    }
    route = parent.route.pattern;
    err = "Dependency '" + parent.dependency + "' not found for route '" + route + "'";
    throw new Error(err);
  };

  Flow.prototype.filter_deads = function() {
    var fluid, is_pending, _i, _len, _ref, _results;
    _ref = this.actives;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fluid = _ref[_i];
      is_pending = find(this.pendings, function(f) {
        return f.url === fluid.url;
      });
      if (!is_pending) {
        _results.push(this.deads.push(fluid));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Flow.prototype.run_pendings = function(url, done) {
    var fluid, is_active,
      _this = this;
    if (this.pendings.length === 0) {
      return done();
    }
    fluid = this.pendings.shift();
    is_active = find(this.actives, function(f) {
      return f.url === fluid.url;
    });
    if (is_active) {
      return this.run_pendings(url, done);
    }
    this.actives.push(fluid);
    this.emit('run:pending', url);
    return fluid.run(url, function() {
      return _this.run_pendings(url, done);
    });
  };

  Flow.prototype.destroy_deads = function(done) {
    var fluid,
      _this = this;
    if (this.deads.length === 0) {
      return done();
    }
    fluid = this.deads.pop();
    this.actives = reject(this.actives, function(f) {
      return f.url === fluid.url;
    });
    return fluid.destroy(function() {
      return _this.destroy_deads(done);
    });
  };

  return Flow;

})(Event);
