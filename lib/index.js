// Generated by CoffeeScript 1.6.3
var Event, Flow, Route, Router,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Event = require('the-event');

Route = require('./route');

Flow = require('./flow');

Router = (function(_super) {
  __extends(Router, _super);

  Router.prototype.mode = null;

  Router.prototype.flow = null;

  Router.prototype.routes = null;

  Router.prototype.middlware = null;

  function Router(mode) {
    var _this = this;
    this.mode = mode;
    this.routes = [];
    if (this.mode != null) {
      this.flow = new Flow(this);
      this.flow.on('run:pending', function(url) {
        return _this.emit('url:change');
      });
    }
  }

  Router.prototype.use = function(Middleware) {
    var _this = this;
    if (this.middleware != null) {
      return;
    }
    this.middleware = new Middleware;
    return this.middleware.on('url:change', function() {
      return _this.route(_this.middleware.get_url());
    });
  };

  Router.prototype.init = function(url) {
    if (url != null) {
      return this.route(url);
    }
  };

  Router.prototype.get = function(pattern, run, destroy, dependency) {
    var route;
    route = new Route(pattern, run, destroy, dependency);
    this.routes.push(route);
    return route;
  };

  Router.prototype.get_url = function() {
    if (this.middleware != null) {
      return this.middleware.get_url();
    }
  };

  Router.prototype.route = function(url) {
    var route, _i, _len, _ref;
    url = '/' + url.replace(/^[\/]+|[\/]+$/m, '');
    _ref = this.routes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      route = _ref[_i];
      if (route.matcher.test(url)) {
        return this.run(url, route);
      }
    }
    throw new Error("Route not found for url '" + url + "'");
  };

  Router.prototype.run = function(url, route) {
    if (this.flow != null) {
      this.flow.run(url, route);
    } else {
      this.emit('url:change', url);
      route.run(url);
    }
    return route;
  };

  Router.prototype.push = function(url, title, state) {
    if (this.middleware != null) {
      return this.middleware.push_state(url, title, state);
    } else {
      return this.route(url);
    }
  };

  Router.prototype.replace = function(url, title, state, silent) {
    if (this.middleware != null) {
      return this.middleware.replace_state(url, title, state);
    }
  };

  return Router;

})(Event);

module.exports = Router;
