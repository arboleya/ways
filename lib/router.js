// Generated by CoffeeScript 1.6.3
var Event, Flow, Route, Router,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Event = require('the-event');

Route = require('./route');

Flow = require('./flow');

Router = (function(_super) {
  __extends(Router, _super);

  Router.prototype.mode = null;

  Router.prototype.flow = null;

  Router.prototype.routes = null;

  Router.prototype.middlware = null;

  function Router(mode) {
    this.mode = mode;
    this.routes = [];
    if (this.mode != null) {
      this.flow = new Flow(this);
    }
  }

  Router.prototype.use = function(Middleware) {
    return this.middleware = new Middleware;
  };

  Router.prototype.init = function() {
    var _this = this;
    if (this.middleware != null) {
      this.middleware.on('url:change', function() {
        return _this.route(_this.middleware.get_location());
      });
      return this.route(this.middleware.get_location());
    }
  };

  Router.prototype.get = function(pattern, run, destroy, dependency) {
    var route;
    route = new Route(pattern, run, destroy, dependency);
    this.routes.push(route);
    return route;
  };

  Router.prototype.route = function(url) {
    var route, _i, _len, _ref;
    url = '/' + url.replace(/^[\/]+|[\/]+$/m, '');
    _ref = this.routes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      route = _ref[_i];
      if (route.matcher.test(url)) {
        return this.run(route, url);
      }
    }
    throw new Error("Route not found for url '" + url + "'");
  };

  Router.prototype.run = function(route, url) {
    if (this.mode != null) {
      this.flow.run(url, route);
    } else {
      route.run(url);
    }
    this.emit('url:change', url);
    return route;
  };

  Router.prototype.redirect = function(url, title, state, silent) {
    if (this.middleware != null) {
      if (silent) {
        return this.middleware.replaceState(url, title, state);
      } else {
        return this.middleware.pushState(url, title, state);
      }
    } else {
      return this.route(url);
    }
  };

  return Router;

})(Event);

if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
  module.exports = Router;
} else if ((typeof define !== "undefined" && define !== null ? define.amd : void 0) != null) {
  define(function() {
    return Router;
  });
} else {
  window.TheRouter = Router;
}
